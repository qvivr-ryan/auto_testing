#!/usr/bin/env python
from __future__ import print_function

import binascii
#import logging
import pygatt
import time
from time import sleep
from binascii import hexlify
from createbond import create_bond
from ble_cmd_tx import ble_cmd_transmit
from ble_cmd_tx import ble_cmd_response_status_check
from ble_cmd_tx import ble_packet_receive
from pygatt.exceptions import NotConnectedError

DEVICE_ADD = "CE:58:14:21:45:F1"
ADAPTER_ADD = "B8:27:EB:0B:35:77"

# Many devices, e.g. Fitbit, use random addressing - this is required to
# connect.
ADDRESS_TYPE = pygatt.BLEAddressType.random

adapter = pygatt.GATTToolBackend('hci0',None,None)

uuid_r='6e400003-b5a3-f393-e0a9-e50e24dcca9e'
uuid_w='6e400002-b5a3-f393-e0a9-e50e24dcca9e'

data = bytearray([0x04, 0x09, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00])
data1 = bytearray([0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00])

def cmdresponse(handle=None, value=None):
    #print("Received notification on handle=0x%x, value=0x%s" % (handle, hexlify(value)))
    ble_packet_receive(handle, value)

try:
    adapter.start()
    create_bond(DEVICE_ADD, ADAPTER_ADD)
    try:
        print("Connecting to %s ..." % (DEVICE_ADD))
        device = adapter.connect(DEVICE_ADD, address_type=ADDRESS_TYPE)
        sleep(10) # needs time to setup connection
    except NotConnectedError :
        print("Could not connect to %s. Is the device turned on? " % (DEVICE_ADD))
        raise NotConnectedError("Fatal error. Could not connect to %s " % (DEVICE_ADD))
    else:
        print("Connected to %s" % (DEVICE_ADD))
        print("discovering services...")
        device._characteristics = device.discover_characteristics()
        print("done discovering services...")
    
    #subscribe for notification
    print("subscribing to notifications...")
    device.subscribe(uuid_r, callback=cmdresponse, indication=False)
   
    #ready to send/receive data
    print("ready to send / receive data...\n")
    raw_input("\npress enter to send cmd: 'get_fw_version' \n")
    ble_cmd_transmit(device, 'get_fw_version', bytearray([]))
    #print("time before sleep %s\r\n" % time.ctime())
    time.sleep(2)
    #print("time after sleep %s\r\n" % time.ctime())
    if True == ble_cmd_response_status_check(device):
        print("get_fw_version cmd successful\r\n")
    else:
        print("get_fw_version cmd failed\r\n")
    raw_input("\npress enter to send cmd: 'delete_all_cards' \n")
    ble_cmd_transmit(device, 'delete_all_cards', bytearray([]))
    time.sleep(5)
    if True == ble_cmd_response_status_check(device):
        print("delete_all_cards cmd successful\r\n")
    else:
        print("delete_all_cards cmd failed\r\n")

    raw_input("\npress enter to exit\n")
    
except NotConnectedError as message:
    print(message)
        
finally:
    #adapter.stop()
    print("exiting...")
